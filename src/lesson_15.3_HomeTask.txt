Завдання 1: Принцип єдиної відповідальності (SRP)
Створіть невелику програму, яка моделює бібліотечну систему.
Реалізуйте класи для Книги, Бібліотеки та Користувача.
Переконайтеся, що кожен клас дотримується принципу єдиної відповідальності.
Наприклад, клас Книга повинен бути відповідальним за книжкові деталі, 
Бібліотека за бібліотечні операції, а Користувач за користувальницькі дані.

Завдання 2: Принцип відкритості/закритості (OCP)
Розробіть простий графічний редактор, який дозволяє користувачам малювати різні форми 
(наприклад, кола, прямокутники, трикутники).
Застосуйте принцип відкритості/закритості для зручного розширення для додавання нових форм 
без змінення існуючого коду.
Покажіть приклад додавання нової форми (наприклад, еліпса) без модифікації основної 
функціональності малювання.

Завдання 3: Принцип підстановки Лісков (LSP)
Створіть ієрархію геометричних фігур з класами, такими як Квадрат, Коло та Трикутник.
Застосуйте принцип підстановки Ліскова, переконавшись, що об'єкти базового класу 
(наприклад, Фігура) можуть бути замінені об'єктами похідних класів без впливу на коректність 
програми. Покажіть приклад, де різні форми можуть використовуватися взаємозамінно.

Завдання 4: Принцип розділення інтерфейсу (ISP)
Спроектуйте інтерфейс для Системи Управління Завданнями з методами, такими як createTask(), 
assignTask() та completeTask().
Реалізуйте класи для різних типів користувачів (наприклад, Розробник, Менеджер).
Застосуйте принцип розділення інтерфейсу, переконавшись, що кожен клас реалізує лише ті методи, 
які стосуються його ролі.

Завдання 5: Принцип інверсії залежностей (DIP)
Розробіть систему обміну повідомленнями, де високорівневі модулі відправляють повідомлення 
низькорівневим модулям. Застосуйте принцип інверсії залежностей за допомогою введення залежностей 
або абстракцій, щоб високорівневі модулі залежали від абстракцій, а не від конкретних реалізацій.
Продемонструйте, що зміна реалізації обміну повідомленнями не впливає на високорівневі модулі.